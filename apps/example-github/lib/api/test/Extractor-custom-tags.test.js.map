{"version":3,"file":"Extractor-custom-tags.test.js","sourceRoot":"","sources":["../../../src/api/test/Extractor-custom-tags.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { StandardTags } from '@microsoft/tsdoc';\nimport * as path from 'path';\n\nimport { ExtractorConfig } from '../ExtractorConfig';\n\nconst testDataFolder: string = path.join(__dirname, 'test-data');\n\ndescribe('Extractor-custom-tags', () => {\n  describe('should use a TSDocConfiguration', () => {\n    it.only(\"with custom TSDoc tags defined in the package's tsdoc.json\", () => {\n      const extractorConfig: ExtractorConfig = ExtractorConfig.loadFileAndPrepare(\n        path.join(testDataFolder, 'custom-tsdoc-tags/api-extractor.json')\n      );\n      const { tsdocConfiguration } = extractorConfig;\n\n      expect(tsdocConfiguration.tryGetTagDefinition('@block')).not.toBe(undefined);\n      expect(tsdocConfiguration.tryGetTagDefinition('@inline')).not.toBe(undefined);\n      expect(tsdocConfiguration.tryGetTagDefinition('@modifier')).not.toBe(undefined);\n    });\n    it.only(\"with custom TSDoc tags enabled per the package's tsdoc.json\", () => {\n      const extractorConfig: ExtractorConfig = ExtractorConfig.loadFileAndPrepare(\n        path.join(testDataFolder, 'custom-tsdoc-tags/api-extractor.json')\n      );\n      const { tsdocConfiguration } = extractorConfig;\n      const block = tsdocConfiguration.tryGetTagDefinition('@block')!;\n      const inline = tsdocConfiguration.tryGetTagDefinition('@inline')!;\n      const modifier = tsdocConfiguration.tryGetTagDefinition('@modifier')!;\n\n      expect(tsdocConfiguration.isTagSupported(block)).toBe(true);\n      expect(tsdocConfiguration.isTagSupported(inline)).toBe(true);\n      expect(tsdocConfiguration.isTagSupported(modifier)).toBe(false);\n    });\n    it.only(\"with standard tags and API Extractor custom tags defined and supported when the package's tsdoc.json extends API Extractor's tsdoc.json\", () => {\n      const extractorConfig: ExtractorConfig = ExtractorConfig.loadFileAndPrepare(\n        path.join(testDataFolder, 'custom-tsdoc-tags/api-extractor.json')\n      );\n      const { tsdocConfiguration } = extractorConfig;\n\n      expect(tsdocConfiguration.tryGetTagDefinition('@inline')).not.toBe(undefined);\n      expect(tsdocConfiguration.tryGetTagDefinition('@block')).not.toBe(undefined);\n      expect(tsdocConfiguration.tryGetTagDefinition('@modifier')).not.toBe(undefined);\n\n      StandardTags.allDefinitions\n        .concat([\n          tsdocConfiguration.tryGetTagDefinition('@betaDocumentation')!,\n          tsdocConfiguration.tryGetTagDefinition('@internalRemarks')!,\n          tsdocConfiguration.tryGetTagDefinition('@preapproved')!\n        ])\n        .forEach((tag) => {\n          expect(tsdocConfiguration.tagDefinitions.includes(tag));\n          expect(tsdocConfiguration.supportedTagDefinitions.includes(tag));\n        });\n    });\n  });\n});\n"]}
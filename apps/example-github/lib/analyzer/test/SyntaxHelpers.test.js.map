{"version":3,"file":"SyntaxHelpers.test.js","sourceRoot":"","sources":["../../../src/analyzer/test/SyntaxHelpers.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,oDAAiD;AAEjD,QAAQ,CAAC,6BAAa,CAAC,IAAI,EAAE,GAAG,EAAE;IAChC,EAAE,CAAC,6BAAa,CAAC,uBAAuB,CAAC,IAAI,EAAE,GAAG,EAAE;QAClD,kBAAkB;QAClB,MAAM,MAAM,GAAY;YACtB,EAAE;YACF,QAAQ;YACR,yBAAyB;YACzB,KAAK;YACL,SAAS;YACT,SAAS;YACT,sBAAsB;YACtB,OAAO;SACR,CAAC;QAEF,MAAM,CACJ,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;YACf,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,6BAAa,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE,CAAC;QACxE,CAAC,CAAC,CACH,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAmCvB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { SyntaxHelpers } from '../SyntaxHelpers';\n\ndescribe(SyntaxHelpers.name, () => {\n  it(SyntaxHelpers.makeCamelCaseIdentifier.name, () => {\n    // prettier-ignore\n    const inputs:string[] = [\n      '',\n      '@#(&*^',\n      'api-extractor-lib1-test',\n      'one',\n      'one-two',\n      'ONE-TWO',\n      'ONE/two/ /three/FOUR',\n      '01234'\n    ];\n\n    expect(\n      inputs.map((x) => {\n        return { input: x, output: SyntaxHelpers.makeCamelCaseIdentifier(x) };\n      })\n    ).toMatchInlineSnapshot(`\n      Array [\n        Object {\n          \"input\": \"\",\n          \"output\": \"_\",\n        },\n        Object {\n          \"input\": \"@#(&*^\",\n          \"output\": \"_\",\n        },\n        Object {\n          \"input\": \"api-extractor-lib1-test\",\n          \"output\": \"apiExtractorLib1Test\",\n        },\n        Object {\n          \"input\": \"one\",\n          \"output\": \"one\",\n        },\n        Object {\n          \"input\": \"one-two\",\n          \"output\": \"oneTwo\",\n        },\n        Object {\n          \"input\": \"ONE-TWO\",\n          \"output\": \"oneTwo\",\n        },\n        Object {\n          \"input\": \"ONE/two/ /three/FOUR\",\n          \"output\": \"oneTwoThreeFour\",\n        },\n        Object {\n          \"input\": \"01234\",\n          \"output\": \"_01234\",\n        },\n      ]\n    `);\n  });\n});\n"]}